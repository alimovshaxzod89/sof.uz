<?php

namespace frontend\components;

use common\models\User;
use frontend\assets\AppAsset;
use frontend\models\PostProvider;
use Yii;
use yii\helpers\Url;
use yii\web\IdentityInterface;

class View extends \yii\web\View
{

    protected $_user        = null;
    protected $_bodyClass   = [];
    protected $_canonical;
    protected $_image;
    protected $_keywords    = [];
    protected $_description = [];
    protected $_showPlayer  = false;
    /** @var  ContextInterface */
    public $context;

    public function beginPage()
    {
        if (Yii::$app->controller && Yii::$app->controller->action)
            $this->_bodyClass[] = Yii::$app->controller->id . '_' . Yii::$app->controller->action->id;

        parent::beginPage();
    }

    public function beforeRender($viewFile, $params)
    {
        return parent::beforeRender($viewFile, $params); // TODO: Change the autogenerated stub
    }


    public function hasKeywords()
    {
        $this->_keywords = array_filter($this->_keywords, function ($item) {
            return $item ? true : false;
        });

        return \count($this->_keywords) > 0;
    }

    public function hasDescription()
    {
        $this->_description = array_filter($this->_description, function ($item) {
            return $item ? true : false;
        });

        return \count($this->_description) > 0;
    }

    public function addKeywords($keywords)
    {
        $this->_keywords = array_merge($this->_keywords, $keywords);
    }

    public function addDescription($description)
    {
        $this->_description = array_merge($this->_description, $description);
    }

    public function getKeywords()
    {

        $this->_keywords = array_filter($this->_keywords, function ($item) {
            return $item ? true : false;
        });


        return implode(', ', $this->_keywords);
    }

    public function getDescription()
    {
        $this->_description = array_filter($this->_description, function ($item) {
            return trim($item) ? true : false;
        });

        array_walk($this->_description, function (&$item) {
            $item = trim($item, '.');
        });

        return implode(' ', $this->_description);
    }


    public function getCanonical()
    {
        return $this->_canonical ? $this->_canonical : Url::to(['/' . $this->getFullActionName()], true);
    }

    public function getImage()
    {
        if ($this->_image) {
            return $this->_image;
        } else if (isset($this->params['post'])) {
            /**
             * @var $post PostProvider
             */
            $post = $this->params['post'];
            return $post->getImage(736, 386);
        }

        return $this->getImageUrl("images/logo2.svg");
    }

    /**
     * @return IdentityInterface|User
     */
    public function getUser()
    {
        if (!Yii::$app->user->isGuest && $this->_user === null) {
            $this->_user = Yii::$app->user->identity;
        }
        return $this->_user;
    }

    public function url($data)
    {
        return Yii::$app->urlManager->createUrl($data);
    }

    public function getImageUrl($name)
    {
        return $this->getAssetManager()->getBundle(AppAsset::class)->baseUrl . '/' . $name;
    }

    public function getBodyClass()
    {
        return implode(' ', $this->_bodyClass);
    }

    public function addBodyClass($class)
    {
        $this->_bodyClass[] = $class;
    }

    public function getFullActionName()
    {
        return Yii::$app->controller->id . '/' . Yii::$app->controller->action->id;
    }

    /**
     * @return PostProvider | boolean
     */
    public function getPost()
    {
        return isset($this->params['post']) ? $this->params['post'] : false;
    }

    public function getCategory()
    {
        if ($post = $this->getPost()) {
            return $post->category;
        }

        return false;
    }

}