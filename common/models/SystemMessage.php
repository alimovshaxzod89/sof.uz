<?php

namespace common\models;

use common\components\Config;
use common\components\Translator;
use Yii;
use yii\caching\TagDependency;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;
use yii\mongodb\ActiveRecord;

/**
 * This is the model class for collection "_system_message".
 * @property integer $id
 * @property string  $category
 * @property string  $message
 */
class SystemMessage extends ActiveRecord
{
    const SCENARIO_SEARCH = 'search';
    const CACHE_TAG = 'messages';
    public $search;
    public $translation;
    public $language = Config::LANGUAGE_DEFAULT;

    public function init()
    {
        $this->language = Yii::$app->language;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getId()
    {
        return (string)$this->_id;
    }

    public function attributes()
    {
        $languages = Config::getLanguageLocales();
        return ArrayHelper::merge($languages, ['_id', 'category', 'message']);
    }

    public static function collectionName()
    {
        return '_system_message';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category'], 'string', 'max' => 128],
            [['message'], 'string', 'max' => 4096],
            [Config::getLanguageLocales(), 'string', 'max' => 4096],
            [['search', 'language'], 'safe', 'on' => self::SCENARIO_SEARCH],
            [['language'], 'in', 'range' => Config::getLanguageLocales()],
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->invalidateTranslation();
        parent::afterSave($insert, $changedAttributes);
    }

    public function afterDelete()
    {
        $this->invalidateTranslation();
        parent::afterDelete();
    }


    public function invalidateTranslation()
    {
        TagDependency::invalidate(Yii::$app->cache, [self::CACHE_TAG]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(Config::getLanguageOptions(), [
            'id'          => __('ID'),
            'category'    => __('Category'),
            'translation' => __('Translation'),
            'language'    => __('Language'),
            'message'     => __('Message'),
            'search'      => __('Search by Message / Translation'),
        ]);
    }


    public static function createDefault($message, $category)
    {
        /* @var $mongodb \yii\mongodb\Connection */
        $mongodb    = Yii::$app->mongodb;
        $collection = $mongodb->getCollection(self::collectionName());

        $insert = $collection->insert(
            ArrayHelper::merge([
                                   'category' => $category,
                                   'message'  => trim($message),
                               ],
                               Config::getLanguagesTrans()
            )
        );
        if ($insert) {
            TagDependency::invalidate(Yii::$app->cache, [SystemMessage::CACHE_TAG]);
            return $insert;
        }
        return false;
    }

    public static function getCategoriesArray()
    {
        $all = self::find()->distinct('category');
        return array_combine($all, $all);
    }

    public function search($params, $limit = 20)
    {
        $this->load($params);
        $query = self::find()->select(['message', 'category', $this->language]);

        $attributes = ArrayHelper::merge([
                                             '_id',
                                             'message',
                                             'category',
                                         ], Config::getLanguageLocales());

        $dataProvider = new ActiveDataProvider([
                                                   'query'      => $query,
                                                   'sort'       => [
                                                       'defaultOrder' => [
                                                           '_id' => SORT_DESC,
                                                       ],
                                                       'attributes'   => $attributes,
                                                   ],
                                                   'pagination' => [
                                                       'pageSize' => $limit,
                                                   ],
                                               ]);

        if (!($this->load($params) && $this->validate())) {
            return $dataProvider;
        }

        if ($this->category) {
            $query->where(['category' => $this->category]);
        }

        if ($this->search) {
            $query->orFilterWhere(['message' => ['$regex' => $this->search, '$options' => 'si']]);
            $query->orFilterWhere(['category' => ['$regex' => $this->search, '$options' => 'si']]);
            $query->orFilterWhere([$this->language => ['$regex' => $this->search, '$options' => 'si']]);
        }

        return $dataProvider;
    }

    public function transliterateUzbek()
    {
        $latin  = $this->getAttribute(Config::LANGUAGE_UZBEK);
        $cyrill = $this->getAttribute(Config::LANGUAGE_CYRILLIC);

        if ($latin && !$cyrill) {
            return $this->updateAttributes([Config::LANGUAGE_CYRILLIC => Translator::getInstance()->translateToCyrillic($latin)]);
        }

        if (!$latin && $cyrill) {
            return $this->updateAttributes([Config::LANGUAGE_UZBEK => Translator::getInstance()->translateToLatin($cyrill)]);
        }

        return 0;
    }
}
