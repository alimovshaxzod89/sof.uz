<?php

namespace common\models;

use common\components\Config;
use common\components\Translator;
use Yii;
use yii\caching\TagDependency;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;
use yii\mongodb\ActiveRecord;
use yii\mongodb\Collection;

/**
 * This is the model class for table "system_message".
 * @property integer $id
 * @property string  $category
 * @property string  $translations
 * @property string  $message
 * @property string  $cy-UZ
 * @property string  $ru-RU
 * @property string  $uz-UZ
 */
class SystemMessage extends ActiveRecord
{
    const CACHE_TAG = 'messages';
    public $search;
    public $translation;
    public $language = Config::DEFAULT_LANG;

    public function init()
    {
        $this->language = Yii::$app->language;
        parent::init(); // TODO: Change the autogenerated stub
    }


    public function attributes()
    {
        return ArrayHelper::merge(array_keys(Config::getLanguageOptions()), ['_id', 'category', 'message']);
    }

    public static function collectionName()
    {
        return '_system_message';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['category'], 'string', 'max' => 128],
            [['message'], 'string', 'max' => 4096],
            [array_keys(Config::getLanguagesTrans()), 'string', 'max' => 4096],
            [['search', 'language'], 'safe', 'on' => ['search']],
            [['language'], 'in', 'range' => array_keys(Config::getLanguagesTrans())],
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->invalidateTranslation();
        parent::afterSave($insert, $changedAttributes);
    }

    public function afterDelete()
    {
        $this->invalidateTranslation();
        parent::afterDelete();
    }


    public function invalidateTranslation()
    {
        TagDependency::invalidate(Yii::$app->cache, [self::CACHE_TAG]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'          => __('ID'),
            'category'    => __('Category'),
            'translation' => __('Translation'),
            'language'    => __('Language'),
            'message'     => __('Message'),
            'ru-RU'       => __('Russian'),
            'cy-UZ'       => __('Cyrillic'),
            'uz-UZ'       => __('Uzbek'),
            'search'      => __('Search by Message / Translation'),
        ];
    }


    public static function createDefault($message, $category)
    {
        $collection = Yii::$app->mongodb->getCollection(self::collectionName());

        /** @var Collection $collection */
        $insert = $collection->insert(
            array_merge(
                [
                    'category' => $category,
                    'message'  => trim($message),
                ],
                Config::getLanguagesTrans()
            )
        );
        if ($insert) {
            TagDependency::invalidate(Yii::$app->cache, [SystemMessage::CACHE_TAG]);
            return $insert;
        }
        return false;
    }

    public function search($params)
    {
        $this->load($params);
        $query = self::find()->select(['message', 'category', $this->language]);

        $dataProvider = new ActiveDataProvider([
                                                   'query'      => $query,
                                                   'sort'       => [
                                                       'defaultOrder' => [
                                                           '_id' => 'DESC',
                                                       ],
                                                       'attributes'   => [
                                                           '_id',
                                                           'message',
                                                           'category',
                                                           'cy-UZ',
                                                           'ru-RU',
                                                           'uz-UZ',
                                                       ],
                                                   ],
                                                   'pagination' => [
                                                       'pageSize' => 20,
                                                   ],
                                               ]);

        if (!($this->load($params) && $this->validate())) {
            return $dataProvider;
        }

        if ($this->search) {
            $query->orFilterWhere(['like', 'message', $this->search]);
            $query->orFilterWhere(['like', 'category', $this->search]);
            $query->orFilterWhere(['like', $this->language, $this->search]);
        }

        return $dataProvider;
    }

    public function getId()
    {
        return (string)$this->_id;
    }

    public function transliterateUzbek()
    {
        $latin  = $this->getAttribute(Config::LANGUAGE_UZBEK);
        $cyrill = $this->getAttribute(Config::LANGUAGE_CYRILLIC);

        if ($latin && !$cyrill) {
            return $this->updateAttributes([Config::LANGUAGE_CYRILLIC => Translator::getInstance()->translateToCyrillic($latin)]);
        }

        if (!$latin && $cyrill) {
            return $this->updateAttributes([Config::LANGUAGE_UZBEK => Translator::getInstance()->translateToLatin($cyrill)]);
        }

        return 0;
    }
}
